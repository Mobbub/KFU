def is_prime(n):
    # Проверяет, является ли число n простым
    if n < 2:
        # Числа меньше 2 не являются простыми
        return False

    # Проверка делимости числа n на все числа от 2 до sqrt(n)
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            # Если n делится на i без остатка, то это не простое число
            return False

    # Если ни одно деление не прошло, число простое
    return True

def nearest_prime(n):
    # Находит ближайшие простые числа к n
    if n < 2:
        # Если n меньше 2, ближайшее простое число не существует
        return None
    
    if is_prime(n):
        # Если n простое, возвращаем его
        return n
    
    # Начинаем искать ближайшие простые числа
    lower = n  # Начальное значение для поиска вниз
    upper = n  # Начальное значение для поиска вверх
    while True:
        # Проверяем, являются ли нижний и верхний пределы простыми
        if is_prime(lower) and is_prime(upper):
            # Если нашли оба простых числа, возвращаем их
            return lower, upper

        if is_prime(lower):
            # Если нашли простое число ниже, возвращаем его
            return lower

        if is_prime(upper):
            # Если нашли простое число выше, возвращаем его
            return upper

        # Уменьшаем нижний предел на 1 и увеличиваем верхний на 1 для дальнейшей проверки
        lower -= 1
        upper += 1

def main(num):
    # Основная функция для обработки ввода пользователя
    if not isinstance(num, int) or num <= 0:
        # Проверяем, является ли num целым неотрицательным числом
        return 'Число должно быть целым неотрицательным и не равным 0'

    # Находим ближайшие простые числа к num
    primes = nearest_prime(num)

    # Проверяем, является ли num простым числом
    if isinstance(primes, int) and primes == num:
        return f"Число {num} является простым"

    # Проверяем, если вернулся кортеж (оба ближайших простых числа)
    if isinstance(primes, tuple):
        return f"Ближайшие простые числа к {num} - {primes[0]} и {primes[1]}"
    elif primes:
        # Если вернулось одно простое число
        return f"Ближайшее простое число к {num} - {primes}"
    else:
        # Если n меньше 2, сообщаем, что ближайшего простого числа нет
        return f"Число {num} меньше 2, поэтому нет ближайшего простого числа"

# Главный блок программы, который запрашивает ввод у пользователя
while True:
    user_input = input("Введите целое неотрицательное число > 0: ")
    try:
        # Пробуем преобразовать ввод в целое число
        num = int(user_input)
        # Вызываем функцию main для обработки числа и выводим результат
        print(main(num))
        break  # Выход из цикла, если ввод корректен
    except ValueError:
        # Обработка ошибки, если ввод не является целым числом
        print('Число должно быть целым неотрицательным и не равным 0')
